generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int    @id @default(autoincrement())
  name         String
  email        String @unique
  passwordHash String
  role         String @default("ADMIN")
  campus       String
  jobs         Job[]
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  hashedPassword String
  phoneNumber    String
  resumeUrl      String?
  role           Role             @default(USER)
  exprience      String?
  applications   JobApplication[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  education      Education[]
}

model Education {
  id            Int    @id @default(autoincrement())
  educationName String
  timeLine      String
  Percentage    String
  InstituteName String
  userId        Int
  user          User   @relation(fields: [userId], references: [id])
}

enum JObStatus {
  ACTIVE
  CLOSED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

model Job {
  id                  Int              @id @default(autoincrement())
  title               String
  description         String
  companyName         String           @default("Centurion University")
  campus              String
  salaryRange         String?
  imageURL            String?
  jobType             JobType
  status              JObStatus        @default(ACTIVE)
  department          String?
  applicationDeadline DateTime?
  Qualification       String?
  adminId             Int
  admin               Admin            @relation(fields: [adminId], references: [id])
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  JobApplication      JobApplication[]
}

model JobApplication {
  id          Int               @id @default(autoincrement())
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  jobId       Int
  job         Job               @relation(fields: [jobId], references: [id])

  Interview Interview[]
}

model Interview {
  id               Int              @id @default(autoincrement())
  scheduledAt      DateTime
  status           InterviewStatus  @default(SCHEDULED)
  jobApplicationId Int              @unique
  jobApplication   JobApplication   @relation(fields: [jobApplicationId], references: [id])
  interviewerName  String?
  interviewerEmail String?
  interviewerPhone String?
  modeOfInterview  ModeOfInterview
  interviewResult  InterviewResult?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  ACCEPTED
  REJECTED
}

enum Role {
  ADMIN
  USER
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum InterviewResult {
  SELECTED
  REJECTED
  WAITLISTED
}

enum ModeOfInterview {
  ONLINE
  OFFLINE
}
